{
    "Name": "webviews/hook_webviews",
    "Description": "Hook webview methods",
    "Help": "",
    "Code": "    
    console.log('\\n---------Webviews hook script for ios by ch0pin------------------');


var dumpWebviewSettings = function(wk){

  
  colorLog('JavaScriptEnabled: '+ wk.configuration().preferences().javaScriptEnabled(), {c:Color.Blue});
  colorLog('HasOnlySecureContent: '+ wk.hasOnlySecureContent().toString(), {c:Color.Blue});
  colorLog('AllowFileAccessFromFileURLs: '+wk.configuration().preferences().valueForKey_('allowFileAccessFromFileURLs').toString(), {c:Color.Blue});
  colorLog('AllowUniversalAccessFromFileURLs: '+  wk.configuration().valueForKey_('allowUniversalAccessFromFileURLs').toString(), {c:Color.Blue});
  colorLog('[i]--------------End Of Webview Settings Dump---------------------', {c: Color.Green});

}


var WKWebView = ObjC.classes['WKWebView'];

Interceptor.attach(WKWebView['- loadRequest:'].implementation, {
  onEnter: function(args) {

    let self = new ObjC.Object(ptr(args[0]));
    let myJSURL = (new ObjC.Object(ptr(args[2]))).toString();
    let url = myJSURL.substring(myJSURL.indexOf('URL:'), myJSURL.length-1);
    colorLog('\\n[i]--------------Dumping Webview Settings:-----------------------:', {c: Color.Green});
    colorLog('[i] Launching '+url, {c: Color.Red});
    dumpWebviewSettings(self);
  }
});

Interceptor.attach(WKWebView['- loadHTMLString:baseURL:'].implementation, {
  onEnter: function(args) {

    let self = new ObjC.Object(ptr(args[0]));
    let htmlCode = (new ObjC.Object(ptr(args[2]))).toString();
    let myJSURL = (new ObjC.Object(ptr(args[3]))).toString();
    let url = myJSURL.substring(myJSURL.indexOf('URL:'), myJSURL.length-1);
    colorLog('\\n[i]--------------Dumping Webview Settings:-----------------------:', {c: Color.Green});
    colorLog('[i] loadHTMLString '+htmlCode + '\\n Base :'+url, {c: Color.Red});

    dumpWebviewSettings(self);

  }
});

Interceptor.attach(WKWebView['- loadFileURL:allowingReadAccessToURL:'].implementation, {
  onEnter: function(args) {

    let self = new ObjC.Object(ptr(args[0]));
    let myJSURL = (new ObjC.Object(ptr(args[2]))).toString();
    let url = myJSURL.substring(myJSURL.indexOf('URL:'), myJSURL.length-1);
    colorLog('\\n[i]--------------Dumping Webview Settings:-----------------------:', {c: Color.Green});
    colorLog('[i] Launching '+url, {c: Color.Red});
    dumpWebviewSettings(self);

  }
});


Interceptor.attach(WKWebView['- _evaluateJavaScript:asAsyncFunction:withSourceURL:withArguments:forceUserGesture:inFrame:inWorld:completionHandler:'].implementation, {
  onEnter: function(args) {

    let self = new ObjC.Object(ptr(args[0]));
    let javascript = (new ObjC.Object(ptr(args[2]))).toString();
    colorLog('\\n[i]--------------Dumping Webview Settings:-----------------------:', {c: Color.Green});
    console.log('[i] Javascript: '+javascript);

    dumpWebviewSettings(self);

  }
});

Interceptor.attach(WKWebView['- _evaluateJavaScript:asAsyncFunction:withSourceURL:withArguments:forceUserGesture:inFrame:inWorld:completionHandler:'].implementation, {
  onEnter: function(args) {

    let self = new ObjC.Object(ptr(args[0]));
    let javascript = (new ObjC.Object(ptr(args[2]))).toString();
    colorLog('\\n[i]--------------Dumping Webview Settings:-----------------------:', {c: Color.Green});
    console.log('[i] Javascript: '+javascript);

    dumpWebviewSettings(self);

  }
});

Interceptor.attach(WKWebView['- evaluateJavaScript:completionHandler:'].implementation, {
  onEnter: function(args) {

    let self = new ObjC.Object(ptr(args[0]));
    let javascript = (new ObjC.Object(ptr(args[2]))).toString();
    colorLog('\\n[i]--------------Dumping Webview Settings:-----------------------:', {c: Color.Green});
    console.log('[i] Javascript: '+javascript);

    dumpWebviewSettings(self);

  }
});

Interceptor.attach(WKWebView['- evaluateJavaScript:inFrame:inContentWorld:completionHandler:'].implementation, {
  onEnter: function(args) {

    let self = new ObjC.Object(ptr(args[0]));
    let javascript = (new ObjC.Object(ptr(args[2]))).toString();
    colorLog('\\n[i]--------------Dumping Webview Settings:-----------------------:', {c: Color.Green});
    console.log('[i] Javascript: '+javascript);

    dumpWebviewSettings(self);

  }
});

Interceptor.attach(WKWebView['- _evaluateJavaScriptWithoutUserGesture:completionHandler:'].implementation, {
  onEnter: function(args) {

    let self = new ObjC.Object(ptr(args[0]));
    let javascript = (new ObjC.Object(ptr(args[2]))).toString();
    colorLog('\\n[i]--------------Dumping Webview Settings:-----------------------:', {c: Color.Green});
    console.log('[i] Javascript: '+javascript);

    dumpWebviewSettings(self);

  }
});

Interceptor.attach(WKWebView['- _evaluateJavaScript:inFrame:inContentWorld:completionHandler:'].implementation, {
  onEnter: function(args) {

    let self = new ObjC.Object(ptr(args[0]));
    let javascript = (new ObjC.Object(ptr(args[2]))).toString();
    colorLog('\\n[i]--------------Dumping Webview Settings:-----------------------:', {c: Color.Green});
    console.log('[i] Javascript: '+javascript);

    dumpWebviewSettings(self);

  }
});

Interceptor.attach(WKWebView['- _evaluateJavaScript:withSourceURL:inFrame:inContentWorld:completionHandler:'].implementation, {
  onEnter: function(args) {

    let self = new ObjC.Object(ptr(args[0]));
    let javascript = (new ObjC.Object(ptr(args[2]))).toString();
    colorLog('\\n[i]--------------Dumping Webview Settings:-----------------------:', {c: Color.Green});
    console.log('[i] Javascript: '+javascript);

    dumpWebviewSettings(self);

  }
});

Interceptor.attach(WKWebView['- _callAsyncJavaScript:arguments:inFrame:inContentWorld:completionHandler:'].implementation, {
  onEnter: function(args) {

    let self = new ObjC.Object(ptr(args[0]));
    let javascript = (new ObjC.Object(ptr(args[2]))).toString();
    colorLog('\\n[i]--------------Dumping Webview Settings:-----------------------:', {c: Color.Green});
    console.log('[i] Javascript: '+javascript);

    dumpWebviewSettings(self);

  }
});

Interceptor.attach(WKWebView['- callAsyncJavaScript:arguments:inFrame:inContentWorld:completionHandler:'].implementation, {
  onEnter: function(args) {

    let self = new ObjC.Object(ptr(args[0]));
    let javascript = (new ObjC.Object(ptr(args[2]))).toString();
    colorLog('\\n[i]--------------Dumping Webview Settings:-----------------------:', {c: Color.Green});
    console.log('[i] Javascript: '+javascript);

    dumpWebviewSettings(self);

  }
});




//----------------------WKUserContentController------------------------




var WKUserContentController = ObjC.classes['WKUserContentController'];


Interceptor.attach(WKUserContentController['- addScriptMessageHandlerWithReply:contentWorld:name:'].implementation, {
  onEnter: function(args) {

    let id = (new ObjC.Object(ptr(args[2]))).toString();
    let world = (new ObjC.Object(ptr(args[3]))).toString();
    let name = (new ObjC.Object(ptr(args[4]))).toString();
    colorLog('[i] JS interface detected -------> '+'[i] name:'+name + ', id:'+id + ', contentWorld:'+world , {c: Color.Yellow});
  }
});


Interceptor.attach(WKUserContentController['- _addScriptMessageHandler:name:contentWorld:'].implementation, {
  onEnter: function(args) {
    let id = (new ObjC.Object(ptr(args[2]))).toString();
    let name = (new ObjC.Object(ptr(args[3]))).toString();
    let world = (new ObjC.Object(ptr(args[4]))).toString();
  
    colorLog('[i] JS interface detected -------> '+'[i] name:'+name + ', id:'+id + ', contentWorld:'+world , {c: Color.Yellow});
  }
});

Interceptor.attach(WKUserContentController['- _addScriptMessageHandler:name:userContentWorld:'].implementation, {
  onEnter: function(args) {

    let id = (new ObjC.Object(ptr(args[2]))).toString();
    let name = (new ObjC.Object(ptr(args[3]))).toString();
    let world = (new ObjC.Object(ptr(args[4]))).toString();
  
    colorLog('[i] JS interface detected -------> '+'[i] name:'+name + ', id:'+id + ', userContentWorld:'+world , {c: Color.Yellow});
  }
});

Interceptor.attach(WKUserContentController['- addScriptMessageHandler:name:'].implementation, {
  onEnter: function(args) {

    let id = (new ObjC.Object(ptr(args[2]))).toString();
    let name = (new ObjC.Object(ptr(args[3]))).toString();
    colorLog('[i] JS interface detected -------> '+'[i] name:'+name + ', id:'+id , {c: Color.Yellow});
  }
});

Interceptor.attach(WKUserContentController['- addScriptMessageHandler:contentWorld:name:'].implementation, {
  onEnter: function(args) {
    let id = (new ObjC.Object(ptr(args[2]))).toString();
    let world = (new ObjC.Object(ptr(args[3]))).toString();
    let name = (new ObjC.Object(ptr(args[4]))).toString();
    colorLog('[i] JS interface detected -------> '+'[i] name:'+name + ', id:'+id + ', contentWorld:'+world , {c: Color.Yellow});
  }
});






"
}





