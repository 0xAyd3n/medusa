#Description: 'Use this module to monitor api calls common for backdoor malware'
#Help: Includes hooks to:
-Runtime exec
-Dynamic code loading

#Code:

console.log('\n\nBackdoor monitor  loaded-----------');

    var targetClass = Java.use("java.lang.Runtime");

    targetClass.exec.overload('java.lang.String').implementation = function (x) {
        console.log("[*] exec() called!: "+x);
        return this.exec(x);
    };

    targetClass.exec.overload('[Ljava.lang.String;').implementation = function (x) {
        console.log("[*] exec() called!: "+x);
        return this.exec(x);
    };

    targetClass.exec.overload('java.lang.String', '[Ljava.lang.String;').implementation = function (x,y) {
        console.log("[*] exec() called X= "+x);
        console.log("[*] exec() called Y= "+y);
        return this.exec(x,y);
    };

    targetClass.exec.overload('[Ljava.lang.String;', '[Ljava.lang.String;').implementation = function (x,y) {
        console.log("[*] exec() called X= "+x);
        console.log("[*] exec() called Y= "+y);
        return this.exec(x,y);
    };

    targetClass.exec.overload('[Ljava.lang.String;', '[Ljava.lang.String;', 'java.io.File').implementation = function (x,y,z) {
        console.log("[*] exec() called X= "+x);
        console.log("[*] exec() called Y= "+y);
        console.log("[*] exec() called Z= "+z);
        return this.exec(x,y,z);
    };

    targetClass.exec.overload('java.lang.String', '[Ljava.lang.String;', 'java.io.File').implementation = function (x,y,z) {
        console.log("[*] exec() called X= "+x);
        console.log("[*] exec() called Y= "+y);
        console.log("[*] exec() called Z= "+z);
        return this.exec(x,y,z);
    };


    if(0){
        var dexclassLoader = Java.use("dalvik.system.DexClassLoader");
        console.log("dexclassLoader=" + dexclassLoader); 
        dexclassLoader.$init.implementation = function(dexPath,  optimizedDirectory,  librarySearchPath,  parent){
            console.log("dexPath=" + dexPath );
            console.log("optimizedDirectory=" + optimizedDirectory);
            console.log("librarySearchPath=" + librarySearchPath);
            console.log("parent=" + parent);
            this.$init(dexPath, optimizedDirectory,  librarySearchPath,  parent);
        }
    }
    
    if(0){
       var index = 0;
       var dexclassLoader = Java.use("dalvik.system.BaseDexClassLoader");
        console.log("dexclassLoader=" + dexclassLoader); 
        dexclassLoader.$init.overload("java.lang.String", "java.io.File", "java.lang.String", "java.lang.ClassLoader").implementation = function(dexPath,  optimizedDirectory,  librarySearchPath,  parent){
           console.log( ++index +"、--------------------------");
            console.log("dexPath=" + dexPath );
            console.log("optimizedDirectory=" + optimizedDirectory);
            console.log("librarySearchPath=" + librarySearchPath);
            console.log("parent=" + parent);           
            this.$init(dexPath, optimizedDirectory,  librarySearchPath,  parent);
        }
        dexclassLoader.$init.overload("[Ljava.nio.ByteBuffer;", "java.lang.ClassLoader").implementation = function(byteBuffer,   parent){
            console.log(++index +"、--------------------------");
            console.log("byteBuffer=" + byteBuffer );           
            console.log("parent=" + parent);            
            this.$init(byteBuffer, parent);
        }
    }
    
    if(1){
         var dexclassLoader = Java.use("dalvik.system.BaseDexClassLoader");
         var ClassUse = Java.use("java.lang.Class");
         dexclassLoader.loadClass.overload("java.lang.String").implementation = function(className){
             console.log("[i] DEX Class loader for ClassName=" + className+'\n');
             var result = this.loadClass(className);
             var resultCast = Java.cast(result, ClassUse);
             //console.log("[+] Methods=" + resultCast.getMethods()+'\n');
             return result;
         }
    }
    
    
    