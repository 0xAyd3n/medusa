#Description: 'Use this script to hook content provider queries'
#Help: 
Hooks API calls related to spyware software, including 
- Context provider queries
- Record audio and media
- Monitor clipboard
#Code:

console.log('\n--------Spyware Hooks----------------');
console.log('\n-----------@ch0pin-------------------');

var mediaRecorder = Java.use('android.media.MediaRecorder')
var audioRecord = Java.use('android.media.AudioRecord');
var abstractCursor = Java.use('android.database.AbstractCursor');
// var cursor = Java.use('android.database.Cursor');
var clipboardManager = Java.use('android.content.ClipboardManager');
var Location = Java.use('android.location.Location');

Location.getLatitude.implementation = function() {

        console.log('[i] Application is getting latitude ');

        return 0.0;
}
Location.getLongitude.implementation = function() {
        console.log('[i] Application is getting longtitude ');
        return 0.0();
}

mediaRecorder.setOutputFile.overloads[0].implementation = function(fd){
        console.log('[i] Application is setting the media record file: '+fd);

        this.setOutputFile(fd);
}
mediaRecorder.setOutputFile.overloads[1].implementation = function(fd){
        console.log('[i] Application is setting the media record file');

        this.setOutputFile(fd);
}
mediaRecorder.setOutputFile.overloads[2].implementation = function(fd){
        console.log('[i] Application is setting the media record file');

        this.setOutputFile(fd);
}


mediaRecorder.setAudioSource.implementation = function(audioSource){
        console.log('[i] Media recorder set audio source called');
        this.setAudioSource(audioSource);
}
mediaRecorder.stop.implementation = function(){
        console.log('[i] Media recording stoped');
        this.stop();
}

mediaRecorder.start.implementation = function(){
        console.log('[i] Media recording started');
        this.start();
}
mediaRecorder.setCamera.implementation = function(camera){
        console.log('[i] Application set a camera as an audio source');
        this.setAudioSource(camera);
}
audioRecord.read.overloads[0].implementation = function(audioData, offsetInShorts, sizeInShorts,readMode){
        console.log('[i] Application is reading audio data');
        return this.read(audioData, offsetInShorts, sizeInShorts,readMode);
}
audioRecord.read.overloads[1].implementation = function(audioBuffer,sizeInBytes,readMode){
        console.log('[i] Application is reading audio data');
        return this.read(audioBuffer,sizeInBytes,readMode);
}
audioRecord.read.overloads[2].implementation = function(audioData,  offsetInShorts,  sizeInShorts){
        console.log('[i] Application is getting active microphones');
        return this.read(audioData,  offsetInShorts,  sizeInShorts);
}
audioRecord.read.overloads[3].implementation = function( audioData, 
         offsetInFloats, 
         sizeInFloats, 
         readMod){
        console.log('[i] Application is reading audio data');
        return this.read(audioData, 
                offsetInFloats, 
                sizeInFloats, 
                readMod);
}
audioRecord.read.overloads[4].implementation = function(audioData, 
         offsetInBytes, 
         sizeInBytes, 
         readMode){
        console.log('[i] Application is reading audio data');
        return this.read(audioData, 
                 offsetInBytes, 
                 sizeInBytes, 
                 readMode);
}
audioRecord.read.overloads[5].implementation = function(audioBuffer, 
         sizeInBytes){
        console.log('[i] Application is reading audio data');
        return this.read(audioBuffer, 
                 sizeInBytes);
}
audioRecord.read.overloads[6].implementation = function(audioData, 
         offsetInBytes, 
         sizeInBytes){
        console.log('[i] Application is reading audio data');
        return this.read(audioData, 
                 offsetInBytes, 
                 sizeInBytes);
}

audioRecord.getActiveMicrophones.implementation = function(){
        console.log('[i] Application is getting active microphones');
        return this.getActiveMicrophones();
}

audioRecord.getAudioSource.implementation = function(){
        console.log('[i] Application is getting audio source');
        return this.getAudioSource();
}

audioRecord.startRecording.overloads[0].implementation = function(){
        console.log('[i] Application is recording audio');
        this.startRecording();
}

audioRecord.startRecording.overloads[1].implementation = function(syncEvent){
        console.log('[i] Application is recording audio');
        this.startRecording(syncEvent);
}
audioRecord.stop.implementation = function(){
        console.log('[i] Recording stoped');
        this.stop(syncvent);
}

clipboardManager.getText.implementation = function(){
        console.log('[i] Application is trying to retrieve text from clipboard:');
        console.log('Text: '+this.getText());
        return this.getText();

}

clipboardManager.getPrimaryClip.implementation = function(){
        console.log('[i] Application is trying to retrieve text from clipboard !');
        return this.getPrimaryClip();

}

clipboardManager.hasPrimaryClip.implementation = function(){
        console.log('[i] Application is checking if the clipbard has data!');
        return this.hasPrimaryClip();   
}
clipboardManager.hasText.implementation = function(){
        console.log('[i] Application is checking if the clipbard has data!');
        return this.hasText();   
}

cursor.getColumnIndex.implementation = function(columnName){
        // console.log('[+-------Query Detected-----------+]');
        //console.log(Java.use("android.util.Log").getStackTraceString(Java.use("java.lang.Exception").$new()));
 
         var res = '';
         var index = this.getColumnIndex(columnName);
         //this.moveToFirst();
         if(!this.isAfterLast() && this != null)
          res = this.getString(index);
         
         console.log("[+] Cursor DB Query for:          " + columnName + " ,Result:             " + res); 
 
         //this.moveToFirst();
         return this.getColumnIndex(columnName);
 }
 
 abstractCursor.getColumnIndex.implementation = function(columnName){
        // console.log('[+-------Query Detected-----------+]');
       // console.log(Java.use("android.util.Log").getStackTraceString(Java.use("java.lang.Exception").$new()));
 
         var res = '';
         var index = this.getColumnIndex(columnName);
         //this.moveToFirst();
         if(!this.isAfterLast() && this != null)
          res = this.getString(index);
         
         console.log("[+] Abstract Cursor DB Query for:         " + columnName + " ,Result:             " + res); 
 
         //this.moveToFirst();
         return this.getColumnIndex(columnName);
 }