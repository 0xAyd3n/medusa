#Description: 'Use this script to hook content provider queries'
#Help: 
Hooks API calls related to spyware software, including 
- Context provider queries
- Record audio and media
- Monitor clipboard
#Code:

console.log('\n--------Spyware Hooks----------------');
console.log('\n-----------@ch0pin-------------------');

var mediaRecorder = Java.use('android.media.MediaRecorder')
var audioRecord = Java.use('android.media.AudioRecord');
var abstractCursor = Java.use('android.database.AbstractCursor');
var cursor = Java.use('android.database.Cursor');
var clipboardManager = Java.use('android.content.ClipboardManager');
var Location = Java.use('android.location.Location');
var telephonyManager = Java.use('android.telephony.TelephonyManager');
var systemProperties = Java.use('android.os.SystemProperties');
var contextWrapper = Java.use("android.content.ContextWrapper");
var locationListener = Java.use("android.location.LocationListener");
var locationManager = Java.use('android.location.LocationManager');

// void	getCurrentLocation(String provider, CancellationSignal cancellationSignal, Executor executor, Consumer<Location> consumer)
// Asynchronously returns a single current location fix.

// locationManager.getCurrentLocation.implementation = function(provider,cancellationSignal,executor,consumer){
//         console.log('[+] Application is asking for current location from the provider: '+provider);
//         return this.getLastKnownLocation(provider,cancellationSignal,executor,consumer);
// }

// // public Location getLastKnownLocation (String provider)
// // Gets the last known location from the given provider, or null if there is no last known location. The returned location may be quite old in some circumstances, so the age of the location should always be checked.


locationManager.getLastKnownLocation.implementation = function(provider){
        console.log('[+] Application is asking for last known location from the provider: '+provider);
        return this.getLastKnownLocation(provider);

} 

// abstract void	onLocationChanged(Location location)
// Called when the location has changed.

// default void	onProviderDisabled(String provider)
// Called when the provider is disabled by the user.

// default void	onProviderEnabled(String provider)
// Called when the provider is enabled by the user.

// default void	onStatusChanged(String provider, int status, Bundle extras)
// This method was deprecated in API level 29. This callback will never be invoked on Android Q and above.

locationListener.onLocationChanged.implementation = function(location){
        console.log('[i] Listener for location change triggered');
        this.onLocationChanged(location);
}
locationListener.onProviderDisabled.implementation = function(provider){
        console.log('Provider :'+provider+' has been disabled by the user');
        this.onProviderDisabled(provider);

}
locationListener.onStatusChanged.implementation = function(provider,status,extras){
        console.log('On status changed listener triggered ');
        console.log('Data: ' +provider+' , status: '+status);
        this.onProviderDisabled(provider,status,extras);
}
telephonyManager.getCallState.overloads[0].implementation = function(){
        console.log('[i] Application asks for the state of all calls on the device ')
        return this.getCallState();
}
telephonyManager.getCallState.overloads[1].implementation = function(state){
        console.log('[i] Application asks for the state of all calls on the device ')
        return this.getCallState(state);
}
telephonyManager.getDeviceId.overloads[0].implementation = function(){
        console.log('[i] Application asks for device IMEI')
        return this.getDeviceId();
}
telephonyManager.getDeviceId.overloads[1].implementation = function(slot){
        console.log('[i] Application asks for device IMEI')
        return this.getDeviceId(slot);
}

telephonyManager.getImei.overloads[0].implementation = function(){
        console.log('[i] Application asks for device IMEI')
        return this.getDeviceId();
}
telephonyManager.getImei.overloads[1].implementation = function(slot){
        console.log('[i] Application asks for device IMEI')
        return this.getDeviceId(slot);
}

systemProperties.get.overload('java.lang.String').implementation = function(key){
    console.log('[+] Get system properties called using key: ' + key);
    return this.get(key);
    
}


Location.getLatitude.implementation = function() {
        var lt = this.getLatitude();
        console.log('[i] Application is getting latitude:' + lt);

        return lt;
}
Location.getLongitude.implementation = function() {
        var lgt = this.getLongitude();
        console.log('[i] Application is getting longtitude:'+lgt);
        return lgt;
}

mediaRecorder.setOutputFile.overloads[0].implementation = function(fd){
        console.log('[i] Application is setting the media record file: '+fd);

        this.setOutputFile(fd);
}
mediaRecorder.setOutputFile.overloads[1].implementation = function(fd){
        console.log('[i] Application is setting the media record file');

        this.setOutputFile(fd);
}
mediaRecorder.setOutputFile.overloads[2].implementation = function(fd){
        console.log('[i] Application is setting the media record file');

        this.setOutputFile(fd);
}


mediaRecorder.setAudioSource.implementation = function(audioSource){
        console.log('[i] Media recorder set audio source called');
        this.setAudioSource(audioSource);
}
mediaRecorder.stop.implementation = function(){
        console.log('[i] Media recording stoped');
        this.stop();
}

mediaRecorder.start.implementation = function(){
        console.log('[i] Media recording started');
        this.start();
}
mediaRecorder.setCamera.implementation = function(camera){
        console.log('[i] Application set a camera as an audio source');
        this.setAudioSource(camera);
}
audioRecord.read.overloads[0].implementation = function(audioData, offsetInShorts, sizeInShorts,readMode){
        console.log('[i] Application is reading audio data');
        return this.read(audioData, offsetInShorts, sizeInShorts,readMode);
}
audioRecord.read.overloads[1].implementation = function(audioBuffer,sizeInBytes,readMode){
        console.log('[i] Application is reading audio data');
        return this.read(audioBuffer,sizeInBytes,readMode);
}
audioRecord.read.overloads[2].implementation = function(audioData,  offsetInShorts,  sizeInShorts){
        console.log('[i] Application is getting active microphones');
        return this.read(audioData,  offsetInShorts,  sizeInShorts);
}
audioRecord.read.overloads[3].implementation = function( audioData, 
         offsetInFloats, 
         sizeInFloats, 
         readMod){
        console.log('[i] Application is reading audio data');
        return this.read(audioData, 
                offsetInFloats, 
                sizeInFloats, 
                readMod);
}
audioRecord.read.overloads[4].implementation = function(audioData, 
         offsetInBytes, 
         sizeInBytes, 
         readMode){
        console.log('[i] Application is reading audio data');
        return this.read(audioData, 
                 offsetInBytes, 
                 sizeInBytes, 
                 readMode);
}
audioRecord.read.overloads[5].implementation = function(audioBuffer, 
         sizeInBytes){
        console.log('[i] Application is reading audio data');
        return this.read(audioBuffer, 
                 sizeInBytes);
}
audioRecord.read.overloads[6].implementation = function(audioData, 
         offsetInBytes, 
         sizeInBytes){
        console.log('[i] Application is reading audio data');
        return this.read(audioData, 
                 offsetInBytes, 
                 sizeInBytes);
}

audioRecord.getActiveMicrophones.implementation = function(){
        console.log('[i] Application is getting active microphones');
        return this.getActiveMicrophones();
}

audioRecord.getAudioSource.implementation = function(){
        console.log('[i] Application is getting audio source');
        return this.getAudioSource();
}

audioRecord.startRecording.overloads[0].implementation = function(){
        console.log('[i] Application is recording audio');
        this.startRecording();
}

audioRecord.startRecording.overloads[1].implementation = function(syncEvent){
        console.log('[i] Application is recording audio');
        this.startRecording(syncEvent);
}
audioRecord.stop.implementation = function(){
        console.log('[i] Recording stoped');
        this.stop(syncvent);
}

clipboardManager.getText.implementation = function(){
        console.log('[i] Application is trying to retrieve text from clipboard:');
        console.log('Text: '+this.getText());
        return this.getText();

}

clipboardManager.getPrimaryClip.implementation = function(){
        console.log('[i] Application is trying to retrieve text from clipboard !');
        return this.getPrimaryClip();

}

clipboardManager.hasPrimaryClip.implementation = function(){
        console.log('[i] Application is checking if the clipbard has data!');
        return this.hasPrimaryClip();   
}
clipboardManager.hasText.implementation = function(){
        console.log('[i] Application is checking if the clipbard has data!');
        return this.hasText();   
}

cursor.getColumnIndex.implementation = function(columnName){
        // console.log('[+-------Query Detected-----------+]');
        //console.log(Java.use("android.util.Log").getStackTraceString(Java.use("java.lang.Exception").$new()));
 
         var res = '';
         var index = this.getColumnIndex(columnName);
         //this.moveToFirst();
         if(!this.isAfterLast() && this != null)
          res = this.getString(index);
         
        colorLog("[+] AbstractCursor DB Query for: " + columnName ,{ c: Color.Red }); 
        colorLog("[+] Result: " + res,{ c: Color.Red } )
         //this.moveToFirst();
         return this.getColumnIndex(columnName);
 }
 
 abstractCursor.getColumnIndex.implementation = function(columnName){
        // console.log('[+-------Query Detected-----------+]');
       // console.log(Java.use("android.util.Log").getStackTraceString(Java.use("java.lang.Exception").$new()));
 
         var res = '';
         var index = this.getColumnIndex(columnName);
         //this.moveToFirst();
         if(!this.isAfterLast() && this != null)
          res = this.getString(index);
        console.log('----------------------------------------------------');
        colorLog("[+] AbstractCursor DB Query for: " + columnName ,{ c: Color.Red }); 
        colorLog("[+] Result: " + res,{ c: Color.Green } ) 
         //this.moveToFirst();
         return this.getColumnIndex(columnName);
 }


 contextWrapper.openFileInput.overload("java.lang.String").implementation = function(fileName) {
		          
        /*   --- Payload Header --- */
        console.log('[+] Application is opening the file: '+fileName+' for reading ');
    
        return this.openFileInput.overload("java.lang.String").apply(this, arguments);
     
}