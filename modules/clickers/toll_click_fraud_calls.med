#Description: 'Detects calls to API functions which are common for click and toll fraud malware'
#Help: hooks functions common for toll fraud malware including:
- getSimOperator
- setWifiEnabled
- Dynamic class loading
#Code:


		console.log('\n--------Common toll fraud1 by @ch0pin-------');
		
		    var wifiManager = Java.use("android.net.wifi.WifiManager");
		    var telephonyManager = Java.use('android.telephony.TelephonyManager');
		
		    telephonyManager.getSimOperator.overload().implementation = function(){
		        console.log('[!] A call to android.telephony.TelephonyManager.getSimOperator detected');
		        return this.getSimOperator();
		    }
			telephonyManager.getSimOperator.overload('int').implementation = function(sm){
		        console.log('[!] A call to android.telephony.TelephonyManager.getSimOperator detected');
		        return this.getSimOperator(sm);
		    }
		    wifiManager.setWifiEnabled.implementation = function(enabled){
				if(enabled == false)
					colorLog('[!] Application is disabling the WiFi',{ c: Color.Red });
				else
					colorLog('[!] A call to android.net.wifi.WifiManager.setWifiEnabled detected',{c: Color.Red});

		        return this.setWifiEnabled(enabled);
			}
			

			if(0){
				var dexclassLoader = Java.use("dalvik.system.DexClassLoader");
				console.log("dexclassLoader=" + dexclassLoader); 
				dexclassLoader.$init.implementation = function(dexPath,  optimizedDirectory,  librarySearchPath,  parent){
					console.log("dexPath=" + dexPath );
					console.log("optimizedDirectory=" + optimizedDirectory);
					console.log("librarySearchPath=" + librarySearchPath);
					console.log("parent=" + parent);
					this.$init(dexPath, optimizedDirectory,  librarySearchPath,  parent);
				}
			}
			
			if(0){
			   var index = 0;
			   var dexclassLoader = Java.use("dalvik.system.BaseDexClassLoader");
				console.log("dexclassLoader=" + dexclassLoader); 
				dexclassLoader.$init.overload("java.lang.String", "java.io.File", "java.lang.String", "java.lang.ClassLoader").implementation = function(dexPath,  optimizedDirectory,  librarySearchPath,  parent){
				   console.log( ++index +"、--------------------------");
					console.log("dexPath=" + dexPath );
					console.log("optimizedDirectory=" + optimizedDirectory);
					console.log("librarySearchPath=" + librarySearchPath);
					console.log("parent=" + parent);           
					this.$init(dexPath, optimizedDirectory,  librarySearchPath,  parent);
				}
				dexclassLoader.$init.overload("[Ljava.nio.ByteBuffer;", "java.lang.ClassLoader").implementation = function(byteBuffer,   parent){
					console.log(++index +"、--------------------------");
					console.log("byteBuffer=" + byteBuffer );           
					console.log("parent=" + parent);            
					this.$init(byteBuffer, parent);
				}
			}
			
			if(1){
				 var dexclassLoader = Java.use("dalvik.system.BaseDexClassLoader");
				 var ClassUse = Java.use("java.lang.Class");
				 dexclassLoader.loadClass.overload("java.lang.String").implementation = function(className){
					 console.log("[i] DEX Class loader for ClassName=" + className+'\n');
					 var result = this.loadClass(className);
					 var resultCast = Java.cast(result, ClassUse);
					 //console.log("[+] Methods=" + resultCast.getMethods()+'\n');
					 return result;
				 }
			}
			
			